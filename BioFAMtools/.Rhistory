true <- get_data(model, views="RNA", features=list("RNA"=features), as.data.frame = T) %>%
.[,c("feature","sample","value")] %>% as.data.table %>%
setnames(c("gene","sample_name","true"))
predAndtrue <- merge(pred,true, by=c("gene","sample_name"))
to.plot <- dim.red %>% merge(predAndtrue, by="sample_name") %>%
melt(id.vars=c("sample_name","V1","V2","gene"), value.name="expr")
# target <- c("Lefty2","Mesp1","T")
# to.plot2 <- to.plot[gene%in%c(target)]
lim.y <- c(min(to.plot$expr,na.rm=T), max(to.plot$expr,na.rm=T))
to.plot[,tmp:=paste(gene,variable,sep=" ")]
p <- ggplot(to.plot, aes(x=V1, y=V2)) +
facet_wrap(~tmp, scales="fixed", ncol=4) +
geom_point(aes(color=expr), alpha=0.75, size=0.25) +
scale_colour_gradientn(colours = terrain.colors(10), limits=lim.y) +
labs(x="", y="") +
theme_classic() +
theme(
axis.text = element_blank(),
axis.line = element_line(colour="black", size=rel(1.0)),
axis.ticks = element_blank(),
legend.position="right",
legend.key = element_blank(),
legend.title=element_blank(),
legend.background=element_blank()
)
print(p)
p <- ggplot(to.plot, aes(x=V1, y=V2)) +
facet_wrap(~tmp, scales="fixed", ncol=2) +
geom_point(aes(color=expr), alpha=0.75, size=0.25) +
scale_colour_gradientn(colours = terrain.colors(10), limits=lim.y) +
labs(x="", y="") +
theme_classic() +
theme(
axis.text = element_blank(),
axis.line = element_line(colour="black", size=rel(1.0)),
axis.ticks = element_blank(),
legend.position="right",
legend.key = element_blank(),
legend.title=element_blank(),
legend.background=element_blank()
)
print(p)
# top.features <- names(head(sort(get_weights(model, views=view, factor=factor)[[1]][,1]), n=20))
top.features <- c("Tdgf1","Frzb")
bottom.features <- c("Pim2","Cldn6")
# features <- c(top.features, bottom.features)
features <- bottom.features
pred <- lapply(predict(model, views="RNA")[[1]], function(x) x[features,])
pred <- do.call("cbind",pred) %>% as.data.frame %>% tibble::rownames_to_column("gene") %>% as.data.table
pred <- melt(pred, id.vars=c("gene"), variable.name="sample_name", value.name="predicted")
true <- get_data(model, views="RNA", features=list("RNA"=features), as.data.frame = T) %>%
.[,c("feature","sample","value")] %>% as.data.table %>%
setnames(c("gene","sample_name","true"))
predAndtrue <- merge(pred,true, by=c("gene","sample_name"))
to.plot <- dim.red %>% merge(predAndtrue, by="sample_name") %>%
melt(id.vars=c("sample_name","V1","V2","gene"), value.name="expr")
# target <- c("Lefty2","Mesp1","T")
# to.plot2 <- to.plot[gene%in%c(target)]
lim.y <- c(min(to.plot$expr,na.rm=T), max(to.plot$expr,na.rm=T))
to.plot[,tmp:=paste(gene,variable,sep=" ")]
p <- ggplot(to.plot, aes(x=V1, y=V2)) +
facet_wrap(~tmp, scales="fixed", ncol=2) +
geom_point(aes(color=expr), alpha=0.75, size=0.25) +
scale_colour_gradientn(colours = terrain.colors(10), limits=lim.y) +
labs(x="", y="") +
theme_classic() +
theme(
axis.text = element_blank(),
axis.line = element_line(colour="black", size=rel(1.0)),
axis.ticks = element_blank(),
legend.position="right",
legend.key = element_blank(),
legend.title=element_blank(),
legend.background=element_blank()
)
print(p)
# pdf(paste0(io$pdfdir,"/denoise/rna_beforeDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_scNMT"),
denoise = FALSE, imputed = FALSE,
color = brewer.pal(9,"YlOrRd"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# dev.off()
# pdf(paste0(io$pdfdir,"/denoise/rna_afterDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_scNMT"),
denoise = TRUE, imputed = TRUE,
color = brewer.pal(9,"YlOrRd"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# dev.off()
# pdf(paste0(io$pdfdir,"/denoise/rna_beforeDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_scNMT"),
denoise = FALSE, imputed = FALSE,
color = brewer.pal(9,"YlOrRd"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# pdf(paste0(io$pdfdir,"/denoise/rna_beforeDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_scNMT"),
denoise = FALSE, imputed = FALSE,
color = brewer.pal(9,"YlOrRd"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
view
facotr
view <- "Enhancer methylation"
# pdf(paste0(io$pdfdir,"/denoise/rna_beforeDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_scNMT"),
denoise = FALSE, imputed = FALSE,
color = brewer.pal(9,"YlOrRd"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# dev.off()
# pdf(paste0(io$pdfdir,"/denoise/rna_afterDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_scNMT"),
denoise = TRUE, imputed = TRUE,
color = brewer.pal(9,"YlOrRd"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# dev.off()
# pdf(paste0(io$pdfdir,"/denoise/rna_afterDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_scNMT"),
denoise = FALSE, imputed = TRUE,
color = brewer.pal(9,"YlOrRd"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
brewer.pal(9,"Blues")
brewer.pal(11,"Blues")
# pdf(paste0(io$pdfdir,"/denoise/rna_beforeDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_scNMT"),
denoise = FALSE, imputed = FALSE,
color = brewer.pal(9,"Blues"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# dev.off()
# pdf(paste0(io$pdfdir,"/denoise/rna_afterDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_scNMT"),
denoise = FALSE, imputed = TRUE,
color = brewer.pal(9,"Blues"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# dev.off()
# pdf(paste0(io$pdfdir,"/denoise/rna_beforeDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_10x"),
denoise = FALSE, imputed = FALSE,
color = brewer.pal(9,"Blues"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# pdf(paste0(io$pdfdir,"/denoise/rna_afterDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_10x"),
denoise = FALSE, imputed = TRUE,
color = brewer.pal(9,"Blues"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# pdf(paste0(io$pdfdir,"/denoise/rna_afterDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_10x","E7.5_scNMT"),
denoise = FALSE, imputed = TRUE,
color = brewer.pal(9,"Blues"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# pdf(paste0(io$pdfdir,"/denoise/rna_afterDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_10x"),
denoise = FALSE, imputed = TRUE,
color = brewer.pal(9,"Blues"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# pdf(paste0(io$pdfdir,"/denoise/rna_afterDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 100,
factor = factor,
view = view,
groups = c("E7.5_10x"),
denoise = FALSE, imputed = TRUE,
color = brewer.pal(9,"Blues"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# pdf(paste0(io$pdfdir,"/denoise/rna_afterDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_10x"),
denoise = FALSE, imputed = TRUE,
color = brewer.pal(9,"Blues"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
# pdf(paste0(io$pdfdir,"/denoise/rna_afterDenoise.pdf"), onefile = T, width=5, height=5)
plot_data_heatmap(
model,
features = 50,
factor = factor,
view = view,
groups = c("E7.5_10x"),
denoise = FALSE, imputed = TRUE,
color = brewer.pal(9,"YlOrRd"),
annotation_col=anno_df, annotation_colors=anno_colors,
show_rownames=F, show_colnames=F,
cluster_rows=F, cluster_cols=F
)
top.features <- names(head(sort(get_weights(model, views=view, factor=factor)[[1]][,1]), n=20))
top.features
top.features <- names(head(sort(get_weights(model, views=view, factor=factor)[[1]][,1]), n=1))
top.features <- names(head(sort(get_weights(model, views=view, factor=factor)[[1]][,1]), n=1))
# features <- c(top.features, bottom.features)
features <- top.features
pred <- lapply(predict(model, views=view)[[1]], function(x) x[features,])
pred <- do.call("cbind",pred) %>% as.data.frame %>% tibble::rownames_to_column("gene") %>% as.data.table
pred <- melt(pred, id.vars=c("gene"), variable.name="sample_name", value.name="predicted")
true <- get_data(model, views=view, features=list(view=features), as.data.frame = T) %>%
.[,c("feature","sample","value")] %>% as.data.table %>%
setnames(c("gene","sample_name","true"))
predAndtrue <- merge(pred,true, by=c("gene","sample_name"))
top.features <- names(head(sort(get_weights(model, views=view, factor=factor)[[1]][,1]), n=2))
# features <- c(top.features, bottom.features)
features <- top.features
pred <- lapply(predict(model, views=view)[[1]], function(x) x[features,])
pred <- do.call("cbind",pred) %>% as.data.frame %>% tibble::rownames_to_column("gene") %>% as.data.table
pred <- melt(pred, id.vars=c("gene"), variable.name="sample_name", value.name="predicted")
true <- get_data(model, views=view, features=list(view=features), as.data.frame = T) %>%
.[,c("feature","sample","value")] %>% as.data.table %>%
setnames(c("gene","sample_name","true"))
predAndtrue <- merge(pred,true, by=c("gene","sample_name"))
head(predAndtrue)
to.plot <- dim.red %>% merge(predAndtrue, by="sample_name") %>%
melt(id.vars=c("sample_name","V1","V2","gene"), value.name="expr")
# target <- c("Lefty2","Mesp1","T")
# to.plot2 <- to.plot[gene%in%c(target)]
lim.y <- c(min(to.plot$expr,na.rm=T), max(to.plot$expr,na.rm=T))
to.plot[,tmp:=paste(gene,variable,sep=" ")]
p <- ggplot(to.plot, aes(x=V1, y=V2)) +
facet_wrap(~tmp, scales="fixed", ncol=2) +
geom_point(aes(color=expr), alpha=0.75, size=0.25) +
scale_colour_gradientn(colours = terrain.colors(10), limits=lim.y) +
labs(x="", y="") +
theme_classic() +
theme(
axis.text = element_blank(),
axis.line = element_line(colour="black", size=rel(1.0)),
axis.ticks = element_blank(),
legend.position="right",
legend.key = element_blank(),
legend.title=element_blank(),
legend.background=element_blank()
)
print(p)
# target <- c("Lefty2","Mesp1","T")
# to.plot2 <- to.plot[gene%in%c(target)]
lim.y <- c(min(to.plot$expr,na.rm=T), max(to.plot$expr,na.rm=T))
to.plot[,tmp:=paste(gene,variable,sep=" ")]
p <- ggplot(to.plot, aes(x=V1, y=V2)) +
facet_wrap(~tmp, scales="fixed", ncol=2) +
geom_point(aes(color=expr), alpha=0.75, size=0.25) +
scale_colour_gradientn(colours = brewer.pal(9, "OrRd")) +
labs(x="", y="") +
theme_classic() +
theme(
axis.text = element_blank(),
axis.line = element_line(colour="black", size=rel(1.0)),
axis.ticks = element_blank(),
legend.position="right",
legend.key = element_blank(),
legend.title=element_blank(),
legend.background=element_blank()
)
print(p)
head(to.plot)
# Convert M-values to B-values
to.plot[,expr:=100*2**expr/(1+2**expr)]
# target <- c("Lefty2","Mesp1","T")
# to.plot2 <- to.plot[gene%in%c(target)]
lim.y <- c(min(to.plot$expr,na.rm=T), max(to.plot$expr,na.rm=T))
to.plot[,tmp:=paste(gene,variable,sep=" ")]
p <- ggplot(to.plot, aes(x=V1, y=V2)) +
facet_wrap(~tmp, scales="fixed", ncol=2) +
geom_point(aes(color=expr), alpha=0.75, size=0.25) +
scale_colour_gradientn(colours = brewer.pal(9, "OrRd")) +
labs(x="", y="") +
theme_classic() +
theme(
axis.text = element_blank(),
axis.line = element_line(colour="black", size=rel(1.0)),
axis.ticks = element_blank(),
legend.position="right",
legend.key = element_blank(),
legend.title=element_blank(),
legend.background=element_blank()
)
print(p)
to.plot[expr<min_met]
head(to.plot)
min_met <- 15
max_met <- 85
to.plot[expr<min_met]
to.plot <- dim.red %>% merge(predAndtrue, by="sample_name") %>%
melt(id.vars=c("sample_name","V1","V2","gene"), value.name="expr")
# Convert M-values to B-values
to.plot[,expr:=100*2**expr/(1+2**expr)]
min_met <- 15
max_met <- 85
to.plot[expr<min_met,expr:=min_met]
to.plot[expr<max_met,expr:=max_met]
# target <- c("Lefty2","Mesp1","T")
# to.plot2 <- to.plot[gene%in%c(target)]
lim.y <- c(min(to.plot$expr,na.rm=T), max(to.plot$expr,na.rm=T))
to.plot[,tmp:=paste(gene,variable,sep=" ")]
p <- ggplot(to.plot, aes(x=V1, y=V2)) +
facet_wrap(~tmp, scales="fixed", ncol=2) +
geom_point(aes(color=expr), alpha=0.75, size=0.25) +
scale_colour_gradientn(colours = brewer.pal(9, "OrRd")) +
labs(x="", y="") +
theme_classic() +
theme(
axis.text = element_blank(),
axis.line = element_line(colour="black", size=rel(1.0)),
axis.ticks = element_blank(),
legend.position="right",
legend.key = element_blank(),
legend.title=element_blank(),
legend.background=element_blank()
)
print(p)
to.plot <- dim.red %>% merge(predAndtrue, by="sample_name") %>%
melt(id.vars=c("sample_name","V1","V2","gene"), value.name="expr")
# Convert M-values to B-values
to.plot[,expr:=100*2**expr/(1+2**expr)]
min_met <- 15
max_met <- 85
to.plot[expr<min_met,expr:=min_met]
to.plot[expr>max_met,expr:=max_met]
# target <- c("Lefty2","Mesp1","T")
# to.plot2 <- to.plot[gene%in%c(target)]
lim.y <- c(min(to.plot$expr,na.rm=T), max(to.plot$expr,na.rm=T))
to.plot[,tmp:=paste(gene,variable,sep=" ")]
p <- ggplot(to.plot, aes(x=V1, y=V2)) +
facet_wrap(~tmp, scales="fixed", ncol=2) +
geom_point(aes(color=expr), alpha=0.75, size=0.25) +
scale_colour_gradientn(colours = brewer.pal(9, "OrRd")) +
labs(x="", y="") +
theme_classic() +
theme(
axis.text = element_blank(),
axis.line = element_line(colour="black", size=rel(1.0)),
axis.ticks = element_blank(),
legend.position="right",
legend.key = element_blank(),
legend.title=element_blank(),
legend.background=element_blank()
)
print(p)
to.plot <- dim.red %>% merge(predAndtrue, by="sample_name") %>%
melt(id.vars=c("sample_name","V1","V2","gene"), value.name="expr")
# Convert M-values to B-values
to.plot[,expr:=100*2**expr/(1+2**expr)]
min_met <- 20
max_met <- 80
to.plot[expr<min_met,expr:=min_met]
to.plot[expr>max_met,expr:=max_met]
# target <- c("Lefty2","Mesp1","T")
# to.plot2 <- to.plot[gene%in%c(target)]
lim.y <- c(min(to.plot$expr,na.rm=T), max(to.plot$expr,na.rm=T))
to.plot[,tmp:=paste(gene,variable,sep=" ")]
p <- ggplot(to.plot, aes(x=V1, y=V2)) +
facet_wrap(~tmp, scales="fixed", ncol=2) +
geom_point(aes(color=expr), alpha=0.75, size=0.25) +
scale_colour_gradientn(colours = brewer.pal(9, "OrRd")) +
labs(x="", y="") +
theme_classic() +
theme(
axis.text = element_blank(),
axis.line = element_line(colour="black", size=rel(1.0)),
axis.ticks = element_blank(),
legend.position="right",
legend.key = element_blank(),
legend.title=element_blank(),
legend.background=element_blank()
)
print(p)
top.features <- names(head(sort(get_weights(model, views=view, factor=factor)[[1]][,1]), n=2))
bottom.features <- names(tail(sort(get_weights(model, views=view, factor=factor)[[1]][,1]), n=2))
# features <- c(top.features, bottom.features)
features <- bottom.features
pred <- lapply(predict(model, views=view)[[1]], function(x) x[features,])
pred <- do.call("cbind",pred) %>% as.data.frame %>% tibble::rownames_to_column("gene") %>% as.data.table
pred <- melt(pred, id.vars=c("gene"), variable.name="sample_name", value.name="predicted")
true <- get_data(model, views=view, features=list(view=features), as.data.frame = T) %>%
.[,c("feature","sample","value")] %>% as.data.table %>%
setnames(c("gene","sample_name","true"))
predAndtrue <- merge(pred,true, by=c("gene","sample_name"))
to.plot <- dim.red %>% merge(predAndtrue, by="sample_name") %>%
melt(id.vars=c("sample_name","V1","V2","gene"), value.name="expr")
# Convert M-values to B-values
to.plot[,expr:=100*2**expr/(1+2**expr)]
min_met <- 20
max_met <- 80
to.plot[expr<min_met,expr:=min_met]
to.plot[expr>max_met,expr:=max_met]
# target <- c("Lefty2","Mesp1","T")
# to.plot2 <- to.plot[gene%in%c(target)]
lim.y <- c(min(to.plot$expr,na.rm=T), max(to.plot$expr,na.rm=T))
to.plot[,tmp:=paste(gene,variable,sep=" ")]
p <- ggplot(to.plot, aes(x=V1, y=V2)) +
facet_wrap(~tmp, scales="fixed", ncol=2) +
geom_point(aes(color=expr), alpha=0.75, size=0.25) +
scale_colour_gradientn(colours = brewer.pal(9, "OrRd")) +
labs(x="", y="") +
theme_classic() +
theme(
axis.text = element_blank(),
axis.line = element_line(colour="black", size=rel(1.0)),
axis.ticks = element_blank(),
legend.position="right",
legend.key = element_blank(),
legend.title=element_blank(),
legend.background=element_blank()
)
print(p)
