% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_data.R
\name{plot_association_analysis}
\alias{plot_association_analysis}
\title{Association analysis between features and factors}
\usage{
plot_association_analysis(object, factors = "all", views = "all",
  fdr_threshold = 0.1, add_text = TRUE, legend = TRUE,
  return_data = FALSE)
}
\arguments{
\item{object}{a \code{\link{MOFA}} object.}

\item{factors}{character vector with the factor names, or numeric vector with the index of the factors. 
Default is "all".}

\item{views}{character vector with the view names, or numeric vector with the index of the views. 
Default is "all".}

\item{add_text}{logical indicating whether to add the fraction of significant associations as text.}

\item{legend}{logical indicating whether to add legend.}

\item{return_data}{logical indicating whether to return the association results instead of plotting them.}

\item{fdr_threhsold}{FDR threshold for multiple testing correction.}
}
\description{
Function to plot the number of significant associations between features and factors.
}
\details{
This plot uses frequentist statistics and goes against the Bayesian spirit of the model, but it is useful to get an estimate on how many features in each view are driving each factor. 
Some factors are expected to be rather sparse, and capture heterogeneity that is specific to a small amount of features,
whereas other factors are expected to capture broad pattenrs of heterogeneity across many features. \cr 
The bar plots display, for each view, the fraction of features that are significantly associated to each factor. Hence,
each element in the barplot ranges from 0 to 1.\cr
p-values are corrected for multiple testing (per view and factor comparison) using Benjamini-Hochberg (\code{p.adjust(method="fdr"})).
}
\examples{
# Using an existing trained model on simulated data
file <- system.file("exdata", "model.hdf5", package = "MOFA2")
model <- load_model(file)

# Plot correlation between all factors
plot_association_analysis(model)

plot_association_analysis(model, return_data = TRUE)

}
